import{d as k,r as b,c as h,h as t,f as i,e as n,w as c,t as o,b as m,o as g,g as s}from"./app-jkCVtFSG.js";const q=k({__name:"config-api.html",setup(f){const l=b({});function r(){return new Promise((d,e)=>{setTimeout(()=>{d({code:200,items:[{name:"Selector item one",id:1},{name:"Selector item two",id:2},{name:"Selector item three",id:3}]})},2e3)})}return(d,e)=>{const p=m("formkit"),v=m("CodeTabs");return g(),h("div",null,[e[14]||(e[14]=t('<h1 id="组件配置项-component-configuration-items" tabindex="-1"><a class="header-anchor" href="#组件配置项-component-configuration-items"><span>组件配置项(Component Configuration Items)</span></a></h1><h2 id="config-type" tabindex="-1"><a class="header-anchor" href="#config-type"><span>config.type</span></a></h2><p>type字段用于控制formkit加载相关的模块，字段类型：<code>String</code>,下面将介绍type相关合法值。</p><p>The type field is used to control the module loaded by the formkit, field type: <code>String</code>, the legal values associated with type are described below.</p><h3 id="input" tabindex="-1"><a class="header-anchor" href="#input"><span>input</span></a></h3><p>输入框</p>',6)),i(p,{config:[{type:"input",label:"姓名 (Name)",key:"password",props:{placeholder:"请输入姓名",clearable:!0}}],modelValue:l.value,"onUpdate:modelValue":e[0]||(e[0]=a=>l.value=a)},null,8,["modelValue"]),e[15]||(e[15]=t(`<div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>formkit</span></span>
<span class="line">    <span class="token attr-name">:config</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[</span>
<span class="line">        {</span>
<span class="line">            type: &#39;input&#39;,</span>
<span class="line">            label: &#39;姓名 (Name)&#39;,</span>
<span class="line">            key: &#39;password&#39;,</span>
<span class="line">            props: { placeholder: &#39;请输入姓名&#39;, clearable: true }</span>
<span class="line">        }</span>
<span class="line">    ]<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataset<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>formkit</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><a href="https://element-plus.org/zh-CN/component/input.html#api" target="_blank" rel="noopener noreferrer">原生ELinput API</a>请写入props内</p></div><h3 id="select" tabindex="-1"><a class="header-anchor" href="#select"><span>select</span></a></h3><p>select选择器, 当选项过多时，使用下拉菜单展示并选择内容。</p><p>select selector, when there are too many options, use the drop-down menu to display and select the content.</p>`,5)),i(p,{config:[{type:"select",label:"Selector",key:"select1",props:{placeholder:"Pls select",clearable:!0},options:[{name:"Selector item one",id:1},{name:"Selector item two",id:2},{name:"Selector item three",id:3}]}],modelValue:l.value,"onUpdate:modelValue":e[1]||(e[1]=a=>l.value=a)},null,8,["modelValue"]),e[16]||(e[16]=t(`<div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>formkit</span></span>
<span class="line">    <span class="token attr-name">:config</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[</span>
<span class="line">        {</span>
<span class="line">            type: &#39;select&#39;,</span>
<span class="line">            label: &#39;Selector&#39;,</span>
<span class="line">            key: &#39;select1&#39;,</span>
<span class="line">            props: { placeholder: &#39;Pls select&#39;, clearable: true },</span>
<span class="line">            options: [</span>
<span class="line">                { name: &#39;Selector item one&#39;, id: 1 },</span>
<span class="line">                { name: &#39;Selector item two&#39;, id: 2 },</span>
<span class="line">                { name: &#39;Selector item three&#39;, id: 3 }</span>
<span class="line">            ]</span>
<span class="line">        }</span>
<span class="line">    ]<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataset<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>formkit</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Select也可通过<code>requester</code>字段用于动态获取options</p><p>Select can also be used to dynamically fetch options through the <code>requester</code> field.</p>`,3)),i(p,{config:[{type:"select",label:"Selector",key:"select1",props:{placeholder:"Pls select",clearable:!0},requester:r,handler:a=>(a==null?void 0:a.items)||[]}],modelValue:l.value,"onUpdate:modelValue":e[2]||(e[2]=a=>l.value=a)},null,8,["config","modelValue"]),i(v,{id:"43",data:[{id:"Template"},{id:"TypeScript"}]},{title0:c(({value:a,isActive:u})=>e[10]||(e[10]=[s("Template")])),title1:c(({value:a,isActive:u})=>e[11]||(e[11]=[s("TypeScript")])),tab0:c(({value:a,isActive:u})=>e[12]||(e[12]=[n("div",{class:"language-vue line-numbers-mode","data-highlighter":"prismjs","data-ext":"vue"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("formkit")])]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token attr-name"},":config"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("[")]),s(`
`),n("span",{class:"line"},"        {"),s(`
`),n("span",{class:"line"},"            type: 'select',"),s(`
`),n("span",{class:"line"},"            label: 'Selector',"),s(`
`),n("span",{class:"line"},"            key: 'select1',"),s(`
`),n("span",{class:"line"},"            props: { placeholder: 'Pls select', clearable: true },"),s(`
`),n("span",{class:"line"},"            requester: fetchOptions,"),s(`
`),n("span",{class:"line"},"            handler: (response: any) => response?.items || []"),s(`
`),n("span",{class:"line"},"        }"),s(`
`),n("span",{class:"line"},[s("    ]"),n("span",{class:"token punctuation"},'"')])]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token attr-name"},"v-model"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("dataset"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("formkit")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab1:c(({value:a,isActive:u})=>e[13]||(e[13]=[n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token operator"},"<"),s("script setup lang"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'"ts"'),n("span",{class:"token operator"},">")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" ref"),n("span",{class:"token punctuation"},","),s(" computed "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'vue'"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"const"),s(" dataset "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"ref"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"fetchOptions"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},[n("span",{class:"token builtin"},"Promise")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),s("r"),n("span",{class:"token punctuation"},","),s(" j"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token function"},"setTimeout"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("           "),n("span",{class:"token function"},"r"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            code"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"200"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("            items"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"[")]),s(`
`),n("span",{class:"line"},[s("                "),n("span",{class:"token punctuation"},"{"),s(" name"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Selector item one'"),n("span",{class:"token punctuation"},","),s(" id"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("                "),n("span",{class:"token punctuation"},"{"),s(" name"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Selector item two'"),n("span",{class:"token punctuation"},","),s(" id"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("                "),n("span",{class:"token punctuation"},"{"),s(" name"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Selector item three'"),n("span",{class:"token punctuation"},","),s(" id"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"3"),s(),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"},[s("           "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2000"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token operator"},"<"),n("span",{class:"token operator"},"/"),s("script"),n("span",{class:"token operator"},">")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),e[17]||(e[17]=t('<p><code>handler</code>作为额外的辅助字段，它会在<code>requester</code>完成后调用，用于将<code>requester</code>的返回值处理成ELselect option可执行的值，当然如果您的<code>requester</code>返回值符合ELselect option期望类型便不需要使用它。</p><p>The <code>handler</code> is an additional helper field that is called after the <code>requester</code> completes, and is used to process the return value of the <code>requester</code> into a value that can be executed by the ELselect option, although it is not necessary to use it if your <code>requester</code> returns a value of the type that is expected by the ELselect option.</p><h3 id="checkbox" tabindex="-1"><a class="header-anchor" href="#checkbox"><span>checkbox</span></a></h3><p>在一组备选项中进行多选。</p><p>Make multiple choices in a set of alternatives.</p>',5)),i(p,{config:[{type:"checkbox",label:"Checkbox",key:"checkbox",options:[{name:"Selector item one",id:1},{name:"Selector item two",id:2},{name:"Selector item three",id:3}]}],modelValue:l.value,"onUpdate:modelValue":e[3]||(e[3]=a=>l.value=a)},null,8,["modelValue"]),e[18]||(e[18]=t(`<div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>formkit</span></span>
<span class="line">    <span class="token attr-name">:config</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[</span>
<span class="line">        {</span>
<span class="line">            type: &#39;checkbox&#39;,</span>
<span class="line">            label: &#39;Checkbox&#39;,</span>
<span class="line">            key: &#39;checkbox&#39;,</span>
<span class="line">            options: [</span>
<span class="line">                { name: &#39;Selector item one&#39;, id: 1 },</span>
<span class="line">                { name: &#39;Selector item two&#39;, id: 2 },</span>
<span class="line">                { name: &#39;Selector item three&#39;, id: 3 }</span>
<span class="line">            ]</span>
<span class="line">        }</span>
<span class="line">    ]<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataset<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>formkit</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>showAllCheck</code>属性用以表示 checkbox 的不确定状态，一般用于实现全选的效果</p><p>The <code>showAllCheck</code> attribute is used to indicate the indeterminate state of the checkbox, and is generally used to achieve the effect of full check.</p>`,3)),i(p,{config:[{type:"checkbox",label:"Checkbox",key:"checkbox",props:{showAllCheck:!0},options:[{name:"Selector item one",id:1},{name:"Selector item two",id:2},{name:"Selector item three",id:3}]}],modelValue:l.value,"onUpdate:modelValue":e[4]||(e[4]=a=>l.value=a)},null,8,["modelValue"]),n("p",null,"output: "+o(l.value.checkbox),1),e[19]||(e[19]=t(`<div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>formkit</span></span>
<span class="line">    <span class="token attr-name">:config</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[</span>
<span class="line">        {</span>
<span class="line">            type: &#39;checkbox&#39;,</span>
<span class="line">            label: &#39;Checkbox&#39;,</span>
<span class="line">            key: &#39;checkbox&#39;,</span>
<span class="line">            props: { showAllCheck: true },</span>
<span class="line">            options: [</span>
<span class="line">                { name: &#39;Selector item one&#39;, id: 1 },</span>
<span class="line">                { name: &#39;Selector item two&#39;, id: 2 },</span>
<span class="line">                { name: &#39;Selector item three&#39;, id: 3 }</span>
<span class="line">            ]</span>
<span class="line">        }</span>
<span class="line">    ]<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataset<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>formkit</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>当然当您的options需要通过动态获取时，您依旧可以使用<code>requester</code>配合<code>handler</code>辅助完成，详细参考<a href="#select">select requester</a></p><p>Of course, when your options need to be fetched dynamically, you can still use <code>requester</code> with the help of <code>handler</code> to accomplish this <a href="#select">select requester</a></p></div><h3 id="radio" tabindex="-1"><a class="header-anchor" href="#radio"><span>radio</span></a></h3><p>在一组备选项中进行单选</p><p>Make a single choice from a set of alternatives</p>`,5)),i(p,{config:[{type:"radio",label:"Radio",key:"radio",options:[{name:"Selector item one",id:1},{name:"Selector item two",id:2},{name:"Selector item three",id:3}]}],modelValue:l.value,"onUpdate:modelValue":e[5]||(e[5]=a=>l.value=a)},null,8,["modelValue"]),n("p",null,"output: "+o(l.value.radio),1),e[20]||(e[20]=t(`<div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>formkit</span></span>
<span class="line">    <span class="token attr-name">:config</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[</span>
<span class="line">        {</span>
<span class="line">            type: &#39;radio&#39;,</span>
<span class="line">            label: &#39;Radio&#39;,</span>
<span class="line">            key: &#39;radio&#39;,</span>
<span class="line">            options: [</span>
<span class="line">                { name: &#39;Selector item one&#39;, id: 1 },</span>
<span class="line">                { name: &#39;Selector item two&#39;, id: 2 },</span>
<span class="line">                { name: &#39;Selector item three&#39;, id: 3 }</span>
<span class="line">            ]</span>
<span class="line">        }</span>
<span class="line">    ]<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataset<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>formkit</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>当然当您的options需要通过动态获取时，您依旧可以使用<code>requester</code>配合<code>handler</code>辅助完成，详细参考<a href="#select">select requester</a></p><p>Of course, when your options need to be fetched dynamically, you can still use <code>requester</code> with the help of <code>handler</code> to accomplish this <a href="#select">select requester</a></p></div><h3 id="inputnumber" tabindex="-1"><a class="header-anchor" href="#inputnumber"><span>inputNumber</span></a></h3><p>数字输入框, 仅允许输入标准的数字值，可定义范围。详细api参数请参照<a href="https://element-plus.org/zh-CN/component/input-number.html" target="_blank" rel="noopener noreferrer">ElInputNumber API</a></p><p>Numeric input box, only standard numeric values are allowed, range can be defined. Please refer to <a href="https://element-plus.org/zh-CN/component/input-number.html" target="_blank" rel="noopener noreferrer">ElInputNumber API</a> for detailed api parameters.</p>`,5)),i(p,{config:[{type:"inputNumber",label:"InputNumber",key:"inputNumber",props:{min:0,max:10,style:{width:"100%"},prefix:"prefix",suffix:"suffix"}}],modelValue:l.value,"onUpdate:modelValue":e[6]||(e[6]=a=>l.value=a)},null,8,["modelValue"]),n("p",null,"output: "+o(l.value.inputNumber),1),e[21]||(e[21]=t(`<div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>formkit</span></span>
<span class="line">    <span class="token attr-name">:config</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[</span>
<span class="line">        {</span>
<span class="line">            type: &#39;inputNumber&#39;,</span>
<span class="line">            label: &#39;InputNumber&#39;,</span>
<span class="line">            key: &#39;inputNumber&#39;,</span>
<span class="line">            props: {</span>
<span class="line">                min: 0,</span>
<span class="line">                max: 10,</span>
<span class="line">                style: { width: &#39;100%&#39; },</span>
<span class="line">                prefix: &#39;prefix&#39;,</span>
<span class="line">                suffix: &#39;suffix&#39;</span>
<span class="line">            }</span>
<span class="line">        }</span>
<span class="line">    ]<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataset<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>formkit</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>当您需要使用<a href="https://element-plus.org/zh-CN/component/input-number.html" target="_blank" rel="noopener noreferrer">ElInputNumber 原生API</a>时，需要包裹<code>props</code>使用</p><p>When you need to use the <a href="https://element-plus.org/zh-CN/component/input-number.html" target="_blank" rel="noopener noreferrer">ElInputNumber native API</a>, you need to wrap <code>props</code> to use the</p></div><h3 id="address" tabindex="-1"><a class="header-anchor" href="#address"><span>address</span></a></h3><p>具有层级的区域地址选择器, 使用此模块需要传入<code>requester</code>作为数据源</p><p>Hierarchical zone address selector, using this module requires passing in <code>requester</code> as the data source.</p>`,5)),i(p,{config:[{type:"address",label:"Address",key:"address",props:{style:{width:"50%"},level:2,placeholder:"Pls Select Address",requester:a=>r(),handler:a=>(a==null?void 0:a.items)||[]}}],modelValue:l.value,"onUpdate:modelValue":e[7]||(e[7]=a=>l.value=a)},null,8,["config","modelValue"]),e[22]||(e[22]=t(`<div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>formkit</span></span>
<span class="line">    <span class="token attr-name">:config</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[</span>
<span class="line">        {</span>
<span class="line">            type: &#39;address&#39;,</span>
<span class="line">            label: &#39;Address&#39;,</span>
<span class="line">            key: &#39;address&#39;,</span>
<span class="line">            props: {</span>
<span class="line">                style: { width: &#39;50%&#39; },</span>
<span class="line">                level: 2,</span>
<span class="line">                placeholder: &#39;Pls Select Address&#39;,</span>
<span class="line">                requester: (pid: number) =&gt; {</span>
<span class="line">                    // return useAxios().get(\`/default/region/agent-regions?pid=\${pid}\`)</span>
<span class="line">                    return fetchOptions()</span>
<span class="line">                },</span>
<span class="line">                handler: (response: any) =&gt; response?.items || []</span>
<span class="line">            }</span>
<span class="line">        }</span>
<span class="line">    ]<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataset<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>formkit</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>区别于select、checkbox、radio等需要动态获取<code>options</code>的模块，<code>address</code>模块的<code>requester</code>，需要包裹<code>props</code>使用</p><p>Unlike select, checkbox, radio, and other modules that need to get <code>options</code> dynamically, the <code>address</code> module has a <code>requester</code> that needs to be wrapped around <code>props</code> to be used.</p></div><h3 id="popover" tabindex="-1"><a class="header-anchor" href="#popover"><span>popover</span></a></h3><p>文字弹出层</p><p>Text Popup Layer</p>`,5)),i(p,{config:[{type:"popover",label:"popover",key:"popover",props:{placeholder:"Pls Click To Select"},options:[{name:"Selector item one",id:1},{name:"Selector item two",id:2},{name:"Selector item three",id:3}]}],modelValue:l.value,"onUpdate:modelValue":e[8]||(e[8]=a=>l.value=a)},null,8,["modelValue"]),e[23]||(e[23]=t('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>当然当您的options需要通过动态获取时，您依旧可以使用<code>requester</code>配合<code>handler</code>辅助完成，详细参考<a href="#select">select requester</a></p><p>Of course, when your options need to be fetched dynamically, you can still use <code>requester</code> with the help of <code>handler</code> to accomplish this <a href="#select">select requester</a></p></div><h3 id="remotesearchselect" tabindex="-1"><a class="header-anchor" href="#remotesearchselect"><span>remoteSearchSelect</span></a></h3><p>具备远程查询功能的select下拉选择器</p><p>Select dropdown selector with remote query functionality</p>',4)),i(p,{config:[{type:"remoteSearchSelect",label:"Remote Search Select",key:"remoteSearchSelect",props:{labelKey:"name",valueKey:"id",initialValue:null,placeholder:"Click To Search Select",requester:a=>r(),handler:a=>(a==null?void 0:a.items)||[],onChoose:a=>l.value.onChooseCallback=a}}],modelValue:l.value,"onUpdate:modelValue":e[9]||(e[9]=a=>l.value=a)},null,8,["config","modelValue"]),n("p",null,"output remoteSearchSelect: "+o(l.value.remoteSearchSelect),1),n("p",null,"output onChooseCallback: "+o(l.value.onChooseCallback),1),e[24]||(e[24]=t(`<div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>formkit</span></span>
<span class="line">    <span class="token attr-name">:config</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[</span>
<span class="line">        {</span>
<span class="line">            type: &#39;remoteSearchSelect&#39;,</span>
<span class="line">            label: &#39;Remote Search Select&#39;,</span>
<span class="line">            key: &#39;remoteSearchSelect&#39;,</span>
<span class="line">            props: {</span>
<span class="line">                labelKey: &#39;name&#39;,</span>
<span class="line">                valueKey: &#39;id&#39;,</span>
<span class="line">                initialValue: null,</span>
<span class="line">                placeholder: &#39;Click To Search Select&#39;,</span>
<span class="line">                requester: (searchName: string) =&gt; {</span>
<span class="line">                    // return useAxios().get(&#39;/default/xxx&#39;, { params: { searchName } })</span>
<span class="line">                    return fetchOptions()</span>
<span class="line">                },</span>
<span class="line">                handler: (response: any) =&gt; response?.items || [],</span>
<span class="line">                onChoose: (item: any) =&gt; dataset.value.additionalValue = item.name</span>
<span class="line">            }</span>
<span class="line">        }</span>
<span class="line">    ]<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataset<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>formkit</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常对于数据进行远程加载的选择器对于默认数据处理通常难以控制，因为通常后端处理数据查询需要接受<code>item.name</code>但数据绑定通常为<code>item.id</code>，为此我们引入一个新的参数(<code>initialValue</code>)来进行控制, 当<code>initialValue</code>参数不为空时，我们会在组件完成加载后立即将<code>initialValue</code>作为形参调取您提供的<code>requester</code></p><p>Usually selectors that load data remotely are difficult to control the default data handling, because usually the backend handles the data query by accepting <code>item.name</code> but the data binding is usually <code>item.id</code>, for this reason we introduce a new parameter (<code>initialValue</code>) for this purpose, when <code>initialValue</code> is not empty, we will call the <code>requester</code> you provide as a form parameter as soon as the component is finished loading. When the <code>initialValue</code> parameter is not null, we will use <code>initialValue</code> as a formal parameter to fetch your <code>requester</code> as soon as the component finishes loading.</p>`,3))])}}}),S=JSON.parse('{"path":"/config-api.html","title":"组件配置项(Component Configuration Items)","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"config.type","slug":"config-type","link":"#config-type","children":[{"level":3,"title":"input","slug":"input","link":"#input","children":[]},{"level":3,"title":"select","slug":"select","link":"#select","children":[]},{"level":3,"title":"checkbox","slug":"checkbox","link":"#checkbox","children":[]},{"level":3,"title":"radio","slug":"radio","link":"#radio","children":[]},{"level":3,"title":"inputNumber","slug":"inputnumber","link":"#inputnumber","children":[]},{"level":3,"title":"address","slug":"address","link":"#address","children":[]},{"level":3,"title":"popover","slug":"popover","link":"#popover","children":[]},{"level":3,"title":"remoteSearchSelect","slug":"remotesearchselect","link":"#remotesearchselect","children":[]}]}],"git":{"updatedTime":1751622255000,"contributors":[{"name":"NicolasHome","username":"NicolasHome","email":"1556363381@qq.com","commits":2,"url":"https://github.com/NicolasHome"}],"changelog":[{"hash":"cdfb74761362d7695ba802bd7f798a75ec098057","time":1751622255000,"email":"1556363381@qq.com","author":"NicolasHome","message":"Update config-api.md","tag":"v0.1.5"},{"hash":"397ed17c2ef1171608f4e92895829500f422330c","time":1751283533000,"email":"1556363381@qq.com","author":"NicolasHome","message":"Update Doc"}]},"filePathRelative":"config-api.md"}');export{q as comp,S as data};
